SQL Queries for WhatsApp-like Messaging Application
1. Create Tables
1.1 Users Table

CREATE TABLE users (
    user_id SERIAL PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    phone_number VARCHAR(15) UNIQUE NOT NULL,
    profile_picture VARCHAR(255),
    status_message VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

1.2 Contacts Table

CREATE TABLE contacts (
    contact_id SERIAL PRIMARY KEY,
    user_id INT NOT NULL,
    contact_user_id INT NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (contact_user_id) REFERENCES users(user_id),
    UNIQUE (user_id, contact_user_id)
);

1.3 Messages Table

CREATE TABLE messages (
    message_id SERIAL PRIMARY KEY,
    sender_id INT NOT NULL,
    receiver_id INT,
    group_id INT,
    message_text TEXT,
    media_id INT,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (sender_id) REFERENCES users(user_id),
    FOREIGN KEY (receiver_id) REFERENCES users(user_id),
    FOREIGN KEY (group_id) REFERENCES group_chats(group_id),
    FOREIGN KEY (media_id) REFERENCES media(media_id)
);

1.4 Group Chats Table

CREATE TABLE group_chats (
    group_id SERIAL PRIMARY KEY,
    group_name VARCHAR(100) NOT NULL,
    admin_user_id INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (admin_user_id) REFERENCES users(user_id)
);

1.5 Group Members Table

CREATE TABLE group_members (
    group_member_id SERIAL PRIMARY KEY,
    group_id INT NOT NULL,
    user_id INT NOT NULL,
    joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (group_id) REFERENCES group_chats(group_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    UNIQUE (group_id, user_id)
);

1.6 Media Table

CREATE TABLE media (
    media_id SERIAL PRIMARY KEY,
    media_type VARCHAR(50), -- 'image', 'video', 'audio', etc.
    media_url VARCHAR(255) NOT NULL,
    uploaded_by INT NOT NULL,
    uploaded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (uploaded_by) REFERENCES users(user_id)
);

1.7 User Settings Table

CREATE TABLE user_settings (
    user_id INT PRIMARY KEY,
    notification_enabled BOOLEAN DEFAULT TRUE,
    theme VARCHAR(50) DEFAULT 'light',
    language VARCHAR(50) DEFAULT 'English',
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

2. Insert Data
2.1 Add a New User

INSERT INTO users (username, password_hash, email, phone_number, profile_picture, status_message) 
VALUES ('john_doe', 'hashed_password_here', 'john@example.com', '1234567890', '/images/john.jpg', 'Hello there!');

2.2 Add a New Contact

INSERT INTO contacts (user_id, contact_user_id)
VALUES (1, 2);

2.3 Add a Message (Private Chat)

INSERT INTO messages (sender_id, receiver_id, message_text)
VALUES (1, 2, 'Hey! How are you?');

2.4 Add a New Group Chat

INSERT INTO group_chats (group_name, admin_user_id)
VALUES ('Friends Chat', 1);

2.5 Add a User to a Group

INSERT INTO group_members (group_id, user_id)
VALUES (1, 2);

2.6 Add Media

INSERT INTO media (media_type, media_url, uploaded_by)
VALUES ('image', '/media/img1.jpg', 1);

3. Retrieve Data
3.1 Retrieve User Messages

SELECT * FROM messages
WHERE sender_id = 1 OR receiver_id = 1
ORDER BY timestamp DESC;

3.2 Retrieve Group Messages

SELECT * FROM messages
WHERE group_id = 1
ORDER BY timestamp DESC;

3.3 Retrieve Group Members

SELECT u.username FROM users u
JOIN group_members gm ON u.user_id = gm.user_id
WHERE gm.group_id = 1;

4. Update Data
4.1 Update User Profile Picture

UPDATE users
SET profile_picture = '/images/new_picture.jpg'
WHERE user_id = 1;

4.2 Update User Status Message

UPDATE users
SET status_message = 'Having a great day!'
WHERE user_id = 1;

5. Delete Data
5.1 Delete a Message

DELETE FROM messages
WHERE message_id = 5;

5.2 Remove a User from a Group

DELETE FROM group_members
WHERE group_id = 1 AND user_id = 2;

6. Advanced Queries
6.1 Get Recent Chats for a User

SELECT u.username, m.message_text, m.timestamp
FROM messages m
JOIN users u ON (m.receiver_id = u.user_id OR m.sender_id = u.user_id)
WHERE (m.sender_id = 1 OR m.receiver_id = 1)
ORDER BY m.timestamp DESC;

6.2 Get Media Shared in a Group

SELECT media.media_type, media.media_url, users.username, media.uploaded_at
FROM media
JOIN users ON media.uploaded_by = users.user_id
JOIN messages ON media.media_id = messages.media_id
WHERE messages.group_id = 1;
